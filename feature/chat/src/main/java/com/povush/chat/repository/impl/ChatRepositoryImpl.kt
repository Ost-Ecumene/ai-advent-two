package com.povush.chat.repository.impl

import com.povush.chat.ChatConfig
import com.povush.chat.model.ChatItem
import com.povush.chat.model.Role
import com.povush.chat.network.OpenRouterService
import com.povush.chat.network.dto.ChatMessageDto
import com.povush.chat.network.dto.ChatRequestDto
import com.povush.chat.network.dto.toText
import com.povush.chat.repository.ChatRepository
import com.povush.chat.service.QuestGeneratorLLMService
import com.povush.chat.util.MessageTruncator
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import javax.inject.Inject

internal class ChatRepositoryImpl @Inject constructor(
    private val openRouterService: OpenRouterService,
    private val questGeneratorLLMService: QuestGeneratorLLMService,
    private val agentService: com.povush.chat.service.AgentService
) : ChatRepository() {
    private val chatSystemPrompt = listOf(ChatMessageDto("system", ""))
    private val basicHistory = listOf(
        ChatItem.Message(
            text = ChatConfig.FIRST_MESSAGE,
            role = Role.Assistant
        )
    )

    private val _chatHistory = MutableStateFlow<List<ChatItem>>(basicHistory)
    override val chatHistory = _chatHistory.asStateFlow()

    override suspend fun sendRequest(message: String, temperature: Double, model: String) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
        val (processedMessage, wasTruncated) = MessageTruncator.processUserMessage(message)
        
        _chatHistory.update {
            it + ChatItem.Message(
                text = processedMessage,
                role = Role.User
            )
        }
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (wasTruncated) {
            _chatHistory.update {
                it + ChatItem.Log(
                    text = "‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤ 2000 —Ç–æ–∫–µ–Ω–æ–≤. –¢–æ–∫–µ–Ω–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ${MessageTruncator.getTokenCount(message)}",
                    role = Role.Assistant
                )
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç—Å–∫–∏–π workflow
        if (processedMessage.trim().startsWith("/–∞–≥–µ–Ω—Ç—ã", ignoreCase = true) || 
            processedMessage.trim().startsWith("/agents", ignoreCase = true)) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
            val task = processedMessage.removePrefix("/–∞–≥–µ–Ω—Ç—ã").removePrefix("/agents").trim()
            
            if (task.isEmpty()) {
                _chatHistory.update {
                    it + ChatItem.Message(
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: /–∞–≥–µ–Ω—Ç—ã –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
                        role = Role.Assistant
                    )
                }
                return
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            _chatHistory.update {
                it + ChatItem.Log(
                    text = "üîÑ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ workflow...\n${com.povush.chat.model.Agent.Writer.emoji} ${com.povush.chat.model.Agent.Writer.name} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...",
                    role = Role.Assistant
                )
            }
            
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤
                val agentTask = agentService.executeAgentTask(task, temperature, model)
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                _chatHistory.update {
                    it + ChatItem.AgentInteraction(
                        task = agentTask,
                        status = com.povush.chat.model.AgentTaskStatus.COMPLETED
                    )
                }
            } catch (e: Exception) {
                _chatHistory.update {
                    it + ChatItem.Message(
                        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ workflow: ${e.message}",
                        role = Role.Assistant
                    )
                }
            }
            return
        }

        val messages = chatSystemPrompt + chatHistory.value.map { chatItem ->
            when (chatItem) {
                is ChatItem.Message -> ChatMessageDto(
                    role = chatItem.role.internalName,
                    content = chatItem.text
                )
                is ChatItem.Quest -> ChatMessageDto(
                    role = Role.User.internalName,
                    content = chatItem.quest.toText()
                )
                is ChatItem.Log -> ChatMessageDto(
                    role = chatItem.role.internalName,
                    content = chatItem.text
                )
                is ChatItem.AgentInteraction -> ChatMessageDto(
                    role = Role.Assistant.internalName,
                    content = "–ó–∞–¥–∞—á–∞: ${chatItem.task.userTask}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω."
                )
            }
        }

        val request = ChatRequestDto(messages = messages, model = model, temperature = temperature)
        
        // –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        val startTime = System.currentTimeMillis()
        val response = openRouterService.chatCompletion(request)
        val responseTime = System.currentTimeMillis() - startTime
        
        val responseContent = response.choices.firstOrNull()?.message?.content ?: throw NullPointerException("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null!")
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        val usage = response.usage
        val metrics = if (usage != null) {
            com.povush.chat.model.MessageMetrics(
                model = model,
                responseTimeMs = responseTime,
                promptTokens = usage.promptTokens,
                completionTokens = usage.completionTokens,
                totalTokens = usage.totalTokens,
                cost = ChatConfig.ModelPricing.getCost(model, usage.promptTokens, usage.completionTokens)
            )
        } else {
            null
        }

        val answer = if (responseContent.startsWith("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!")) {
            val description = responseContent.removePrefix("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!")
            val log = ChatItem.Log(
                text = description,
                role = Role.Assistant
            )
            _chatHistory.update { it + log }
            val quest = questGeneratorLLMService.createQuest(description, temperature)
            ChatItem.Quest(quest = quest)
        } else {
            ChatItem.Message(
                text = responseContent,
                role = Role.Assistant,
                metrics = metrics
            )
        }

        _chatHistory.update { it + answer }
    }
}